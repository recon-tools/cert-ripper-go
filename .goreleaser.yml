project_name: cert-ripper

release:
  name_template: '{{ .ProjectName }}-{{ .Version }}'

before:
  hooks:
    - go mod tidy

changelog:
  use: github
  sort: asc
  abbrev: 0
  groups:
    - title: Features
      regexp: '^.*?feat(\([[:word:]]+\))??!?:.+$'
      order: 0
    - title: 'Bug fixes'
      regexp: '^.*?bug(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: Others
      order: 999

  filters:
    # Commit messages matching the regexp listed here will be removed from
    # the changelog
    exclude:
      - '^docs:'
      - typo
      - (?i)foo

builds:
  - <<: &build_defaults
      binary: bin/cert-ripper
      ldflags:
        - -s -w -X cert-ripper-go/cmd.appVersion=${{.Version}}" -X cert-ripper-go/cmd.gitCommit=${{.Commit}}
    id: macos
    goos: [darwin]
    goarch: [amd64, arm64]

  - <<: *build_defaults
    id: linux
    goos: [linux]
    goarch: [386, arm, amd64, arm64]
    env:
      - CGO_ENABLED=0

  - <<: *build_defaults
    id: windows
    goos: [windows]
    goarch: [386, amd64, arm64]

archives:
  -
    id: archive
    name_template: '{{ .ProjectName }}-{{ .Version }}-{{ .Os }}-{{ .Arch }}{{ with .Arm }}v{{ . }}{{ end }}{{ with .Mips }}-{{ . }}{{ end }}{{ if not (eq .Amd64 "v1") }}{{ .Amd64 }}{{ end }}'
    format_overrides:
    - goos: windows
      format: zip

brews:
  -
    # GOARM to specify which 32-bit arm version to use if there are multiple
    # versions from the build section. Brew formulas support only one 32-bit
    # version.
    #
    # Default: 6
    goarm: 6

    # GOAMD64 to specify which amd64 version to use if there are multiple
    # versions from the build section.
    #
    # Default: v1
    goamd64: v1

    # NOTE: make sure the url_template, the token and given repo (github or
    # gitlab) owner and name are from the same kind.
    # We will probably unify this in the next major version like it is
    # done with scoop.

    # GitHub/GitLab repository to push the formula to
    tap:
      # Repository owner.
      #
      # Templates: allowed
      owner: recon-tools

      # Repository name.
      #
      # Templates: allowed
      name: homebrew-recon-tools

      # Optionally a branch can be provided.
      #
      # Default: default repository branch.
      # Templates: allowed
      branch: main

      # Optionally a token can be provided, if it differs from the token
      # provided to GoReleaser
      #
      # Templates: allowed
      token: "{{ .vars.HOMEBREW_GITHUB_API_TOKEN }}"

      # Sets up pull request creation instead of just pushing to the given branch.
      # Make sure the 'branch' property is different from base before enabling
      # it.
      #
      # Since: v1.17
      pull_request:
        # Whether to enable it or not.
        enabled: true

        # Base branch of the PR.
        #
        # Default: default repository branch.
        base: main

    # URL which is determined by the given Token (github, gitlab or gitea).
    #
    # Default depends on the client.
    # Templates: allowed
    url_template: "https://github.com/recon-tools/cert-ripper-go/releases/download/{{ .Tag }}/{{ .ArtifactName }}"


    # Allows you to set a custom download strategy. Note that you'll need
    # to implement the strategy and add it to your tap repository.
    # Example: https://docs.brew.sh/Formula-Cookbook#specifying-the-download-strategy-explicitly
    download_strategy: CurlDownloadStrategy

    # Allows you to add a custom require_relative at the top of the formula
    # template.
    custom_require: custom_download_strategy

    # Git author used to commit to the repository.
    commit_author:
      name: goreleaserbot
      email: bot@goreleaser.com

    # The project name and current git tag are used in the format string.
    #
    # Templates: allowed
    commit_msg_template: "Brew formula update for {{ .ProjectName }} version {{ .Tag }}"

    # Folder inside the repository to put the formula.
    folder: Formula

    # Your app's homepage.
    homepage: "https://github.com/recon-tools/cert-ripper-go"

    # Your app's description.
    #
    # Templates: allowed
    description: "Print, extract and validate TLS certificate chains for domains and URLs."

    # SPDX identifier of your app's license.
    license: "MIT"

    # Setting this will prevent goreleaser to actually try to commit the updated
    # formula - instead, the formula file will be stored on the dist folder only,
    # leaving the responsibility of publishing it to the user.
    # If set to auto, the release will not be uploaded to the homebrew tap
    # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
    #
    # Templates: allowed
    skip_upload: false

    # So you can `brew test` your formula.
    test: |
      system "#{bin}/cert-ripper", "--help"

    # Custom install script for brew.
    # Default: 'bin.install "BinaryName"'
    install: |
      bin.install "bin/cert-ripper"